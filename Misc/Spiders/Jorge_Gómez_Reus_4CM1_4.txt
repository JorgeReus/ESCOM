*********Spider.h*********
#include "Coord.h"
#include <cmath>
#include "gfx.h"

#ifndef SPIDER_H_
#define SPIDER_H_
class Spider{
public:
   Spider(Coord c, int r);
};
#endif
********Spider.cpp*******
#include "Spider.h"
#include "Coord.h"
#include <cmath>
#include "gfx.h"

Spider::Spider(Coord c, int r) {
   gfx_color(500, 0, 0);
   // Circle
   for(double theta = 0; theta < 2 * M_PI; theta += .01) {
      int x = c.x + r * cos(theta);
      int y = c.y - r * sin(theta);
      gfx_point(x, y);
   }
   // Legs
   int rl = r * 2;
   double leg = (2 * M_PI) /14.0;
   int i = 0;
   for(double theta = 0; theta < 2 * M_PI; theta += leg) {
      int x = c.x + rl * cos(theta);
      int y = c.y - rl * sin(theta);
      if (i != 2 && i != 3 && i != 4 && i != 9 && i != 10 && i != 11) {
         gfx_line(c.x, c.y, x, y);
      }
      i++;
   }
   // Spiral
   int round = r / 2;
   int n = 10;
   for(int count = 0; count - 5 < round * n; count++) {
      double angle = .2 * count;
      double theta = .2 * (count + 1);
      int x1 = c.x + angle * cos(angle);
      int y1 = c.y + angle * sin(angle);
      int x2 = c.x + theta * cos(theta);
      int y2 = c.y + theta * sin(theta);
      gfx_line(x1, y1, x2, y2);
   }
   gfx_flush();
}
**********datagramPaquet.h********
class PaqueteDatagrama {
public:
   PaqueteDatagrama(int *, unsigned int, char *, int );
   PaqueteDatagrama(unsigned int );
   ~PaqueteDatagrama();
   char *obtieneDireccion();
   unsigned int obtieneLongitud();
   int obtienePuerto();
   int *obtieneDatos();
   void inicializaPuerto(int);
   void inicializaIp(char *);
   void inicializaDatos(int *);
private:
   int *datos;
//Almacena los datos
   char ip[16];
//Almacena la IP
   unsigned int longitud;
//Almacena la longitude de la cadena de datos
   int puerto;
//Almacena el puerto
};
*********datagramPaquet.cpp**********
#include "datagramPaquet.h"
#include <iostream>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

PaqueteDatagrama::PaqueteDatagrama(int *data, unsigned int len, char *address, int port) {
   datos = (int*)malloc(len * sizeof(int));
   memcpy(datos, data, len);
   longitud = len;
   memcpy(ip, address, strlen(address));
   ip[strlen(address)] = '\0';
   puerto = port;
}

PaqueteDatagrama::PaqueteDatagrama(unsigned int len) {
   datos = (int*)malloc(len * sizeof(int));
   longitud = len;
   ip[0] = '\0';
   puerto = 0;
}

PaqueteDatagrama::~PaqueteDatagrama() {
   //free(datos);
}

char *PaqueteDatagrama::obtieneDireccion() {
   return ip;
}

unsigned int PaqueteDatagrama::obtieneLongitud() {
   return longitud;
}

int PaqueteDatagrama::obtienePuerto() {
   return puerto;
}

int *PaqueteDatagrama::obtieneDatos() {
   return datos;
}

void PaqueteDatagrama::inicializaPuerto(int port) {
   puerto = port;
} 

void PaqueteDatagrama::inicializaIp(char *address) {
   memcpy(ip, address, strlen(address));
   ip[strlen(address)] = '\0';
}

void PaqueteDatagrama::inicializaDatos(int *data) {
   memcpy(datos, data, longitud);
}
*********datagramSocket.h**********
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <stdlib.h>


class SocketDatagrama{
public:
   SocketDatagrama(int);
   ~SocketDatagrama();
//Recibe un paquete tipo datagrama proveniente de este socket
   int recibe(PaqueteDatagrama & p);
//Env√≠a un paquete tipo datagrama desde este socket
   int envia(PaqueteDatagrama & p);
private:
   struct sockaddr_in direccionLocal;
   struct sockaddr_in direccionForanea;
    int s; //ID socket
};
***********datagramSocket.cpp*********
#include "datagramPaquet.h"
#include "datagramSocket.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <stdio.h>
#include <iostream>
#include <arpa/inet.h>
#include <stdlib.h>

SocketDatagrama::SocketDatagrama(int port) {
   s = socket(AF_INET, SOCK_DGRAM, 0);
   bzero((char *)&direccionLocal, sizeof(direccionLocal));
   direccionLocal.sin_family = AF_INET;
   direccionLocal.sin_addr.s_addr = INADDR_ANY;
   direccionLocal.sin_port = htons(port);
   bind(s, (struct sockaddr *)&direccionLocal,sizeof(direccionLocal));
   printf("Started at: %d\n", htons(direccionLocal.sin_port));
}

SocketDatagrama::~SocketDatagrama() {
   close(s);
}

int SocketDatagrama::recibe(PaqueteDatagrama &p) {
   bzero((char *)&direccionForanea, sizeof(direccionForanea));
   socklen_t clilen = sizeof(direccionForanea);
   int *data = (int*)malloc(p.obtieneLongitud());
   recvfrom(s, (int*)data, p.obtieneLongitud(), 0, (struct sockaddr *)&direccionForanea, &clilen);
   p.inicializaDatos(data);
   p.inicializaIp(inet_ntoa(direccionForanea.sin_addr));
   p.inicializaPuerto(htons(direccionForanea.sin_port));
   //free(data);
}

int SocketDatagrama::envia(PaqueteDatagrama &p) {
   bzero((char *)&direccionForanea, sizeof(direccionForanea));
   direccionForanea.sin_family = AF_INET;
   direccionForanea.sin_addr.s_addr = inet_addr(p.obtieneDireccion());
   direccionForanea.sin_port = htons(p.obtienePuerto());
   sendto(s, p.obtieneDatos(), p.obtieneLongitud(), 0, (struct sockaddr *) &direccionForanea, sizeof(direccionForanea));

}
**************Coord.h*************
public:
    Coord(int = 0, int = 0);
    int x;
   int y;
 };
#endif
***********Coord.cpp**********
#include "Coord.h"

Coord::Coord(int xx, int yy) : x(xx), y(yy) { }
**************client.cpp***********
#include <arpa/inet.h>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include "Coord.h"
#include "datagramPaquet.h"
#include "datagramSocket.h"
#include <fstream>
#include <iostream>
#include <netinet/in.h>
#include <netdb.h>
#include <utility>
#include <string>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <vector>
#include <tuple>

using namespace std;
int serverPort = 6666;
string serverIP = "127.0.0.1";
double speed = 10.0;

void intsToArray(int x0, int y0, int *dist) {
   dist[0] = x0;
   dist[1] = y0;
}

void arrayToInts(int *x0, int *y0, int *xf, int *yf, int *dist) {
   *x0 = dist[0];
   *y0 = dist[1];
   *xf = dist[2];
   *yf = dist[3];
}

void arrayToPortIp(char *ip, int *port, int *dist) {
   char *ipPort = (char*)(dist + 4);
   strcpy(ip, ipPort);
   *port = atoi(ipPort + strlen(ipPort) + 1);
}

int main(int argc, char *argv[])
{ 
   if(argc > 4 || argc < 2) 
   {
      printf("Usage: ./client speed serverIP serverPort\n");
      exit(0);
   } else if (argc == 4){
      serverIP = argv[2];
      serverPort = atoi(argv[3]);
      speed = atof(argv[1]); 
   } else if (argc == 2) {
      speed = atof(argv[1]); 
   }
   // Initialize coords
   Coord coord(0,0);
   int dist[4];
   int x0;
   int y0;
   int xf;
   int yf;
   // Initialize Socket
   SocketDatagrama* s = new SocketDatagrama(0);
   PaqueteDatagrama p(dist, 10 * sizeof(int), (char*)serverIP.c_str(), serverPort);
   // Send the first message to server
   s->envia(p);
   // printf("Client send a message from: %s, on port: %d\n", p.obtieneDireccion(), 
   //    htons(p.obtienePuerto()));
   s->recibe(p);
   // printf("Client has recieved a message from: %s, on port: %d\n", p.obtieneDireccion(), 
   //    htons(p.obtienePuerto()));
   arrayToInts(&x0, &y0, &xf, &yf, p.obtieneDatos());
   char chasedIp[16];
   int chasedPort;
   arrayToPortIp(chasedIp, &chasedPort, p.obtieneDatos());
   // printf("I am chasing : %s on %d\n", chasedIp, chasedPort);
   int distance;
   // Cicle of send and recive
   while(x0 != xf || y0 != yf) {
      distance += speed;
      //printf("(%d, %d) to (%d, %d) of %s on %d\n", x0, y0, xf, yf, chasedIp, chasedPort);
      if (strcmp(serverIP.c_str(), p.obtieneDireccion()) != 0 || serverPort != p.obtienePuerto()) {
         printf("Distance : %d\n", distance);
         exit(0);
      }
      // Increase the position
      if (x0 < xf) {
         x0 += speed;
         if (x0 > xf) 
            x0 = xf;
      } else {
        x0 -= speed;
        if (x0 < xf) 
         x0 = xf;
   }
   if (y0 < yf) {
      y0 += speed;
      if (y0 > yf) 
         y0 = yf;
   } else {
      y0 -= speed;
        if (y0 < yf) 
         y0 = yf;
   }
      // Conver corrds to array
   intsToArray(x0, y0, dist);
   p.inicializaDatos(dist);
      // Send the coords and recive the new Ones
   s->envia(p);
   if (x0==xf && y0==yf) {
      p.inicializaIp(chasedIp);
      p.inicializaPuerto(chasedPort);
      s->envia(p);
      printf("Distance : %d\n", distance);
      exit(0);
   }
   s->recibe(p);
   arrayToInts(&x0, &y0, &xf, &yf, p.obtieneDatos());
}
delete s;
return 0;
}
******************server.cpp**************
#include <arpa/inet.h>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include "Coord.h"
#include "gfx.h"
#include "Spider.h"
#include "datagramPaquet.h"
#include "datagramSocket.h"
#include <fstream>
#include <iostream>
#include <netinet/in.h>
#include <netdb.h>
#include <queue>
#include <string>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <utility>
#include <tuple>
#include <vector>


int NUM_CLIENTS = 4;

using namespace std;


void printClients(vector<tuple<string, int, Coord, Coord, string, int> > &clients) {
   for (int i=0; i < NUM_CLIENTS; i++) {  
      Spider s2(get<2>(clients[i]), 10); 
      // printf("(%d, %d) to: (%d, %d) : %s at %d\n",get<2>(clients[i]).x, get<2>(clients[i]).y, 
      //    get<3>(clients[i]).x, get<3>(clients[i]).y, get<0>(clients[i]).c_str(), get<1>(clients[i]));
   }
}


bool checkFinished(vector<tuple<string, int, Coord, Coord, string, int> > &clients) {
   bool finished = true;
   for (int i=0; i < NUM_CLIENTS; i++) {
      if (get<2>(clients[i]).x != get<3>(clients[i]).x || get<3>(clients[i]).y != get<2>(clients[i]).y)  {
         finished = false;
      }
      break;
   }
   return finished;
}

void printClient(PaqueteDatagrama p) {
   printf("(%d, %d) to (%d, %d) : %s at %d, chases %s at %d\n", p.obtieneDatos()[0], p.obtieneDatos()[1], 
      p.obtieneDatos()[2], p.obtieneDatos()[3], p.obtieneDireccion(), p.obtienePuerto(), 
      (char*)(p.obtieneDatos() + 4), atoi((char*)(p.obtieneDatos() + 4) + strlen((char*)(p.obtieneDatos() + 4)) + 1));
}

int main(int argc, char *argv[])
{ 
   int port = 6666;
   int length = 500;
   if(argc > 3) 
   {
      printf("Usage: ./server port length\n");
      exit(0);
   } else if (argc == 3) {
      port = atoi(argv[1]);
   } 
   SocketDatagrama* s = new SocketDatagrama(port);
   // Create the datagram for the message of the clients
   vector<Coord> coordinates;
   coordinates.push_back(Coord(10, 10));
   coordinates.push_back(Coord(10, 10 + length));
   coordinates.push_back(Coord(10 + length, 10 + length));
   coordinates.push_back(Coord(10 + length, 10));
   // For Storing the client's addresses and ports
   vector<tuple<string, int, Coord, Coord, string, int> > clients;
   PaqueteDatagrama p(10 * sizeof(int));
   int dist[4];
   // Wait for all client's message
   for (int i=0; i < NUM_CLIENTS; i++) {
      // Recieve the wake up
      s->recibe(p);
      // Save the client's address, port and coordinates
      Coord start(0,0);
      Coord end(0,0);
      if (i + 1 == NUM_CLIENTS) {
         start = coordinates[i];
         end = coordinates[0];
      } else {
         start = coordinates[i];
         end = coordinates[i + 1];
      }
      clients.push_back(make_tuple(p.obtieneDireccion(), p.obtienePuerto(), start, end, "0,0,0,0", 0));
   }
   // Begin the distribution
   gfx_open(length, length, "Spiders");
   char auxIPport[30];
   for (int i=0; i < NUM_CLIENTS; i++) {
      // Your chased client
      if (i + 1 == NUM_CLIENTS) {
         // Unpack the client's address, port and coordinates
         dist[0] = get<2>(clients[i]).x;
         dist[1] = get<2>(clients[i]).y;
         dist[2] = get<2>(clients[0]).x;
         dist[3] = get<2>(clients[0]).y;   
         memcpy(auxIPport, (char*)dist, 4 * sizeof(int));
         memcpy(auxIPport + 16, (char*)get<0>(clients[0]).c_str(), get<0>(clients[0]).size());
         auxIPport[get<0>(clients[0]).size() + 16] = '\0';
         string po = to_string(get<1>(clients[0]));
         // Set the chased
         get<4>(clients[i]) = get<0>(clients[0]);
         get<5>(clients[i]) = get<1>(clients[0]);
         memcpy(auxIPport + get<0>(clients[0]).size() + 17, (char*)po.c_str(), po.size());
      } else {
         // Unpack the client's address, port and coordinates
         dist[0] = get<2>(clients[i]).x;
         dist[1] = get<2>(clients[i]).y;
         dist[2] = get<2>(clients[i + 1]).x;
         dist[3] = get<2>(clients[i + 1]).y;   
         memcpy(auxIPport, (char*)dist, 4 * sizeof(int));
         memcpy(auxIPport + 16, (char*)get<0>(clients[i + 1]).c_str(), get<0>(clients[i + 1]).size() + 1);
         auxIPport[get<0>(clients[0]).size() + 16] = '\0';
         string po = to_string(get<1>(clients[i + 1]));
         // Set the chased
         get<4>(clients[i]) = get<0>(clients[i+1]);
         get<5>(clients[i]) = get<1>(clients[i+1]);
         memcpy(auxIPport + get<0>(clients[0]).size() + 17, (char*)po.c_str(), po.size());
      }
      p.inicializaIp((char*)get<0>(clients[i]).c_str());
      p.inicializaPuerto(get<1>(clients[i]));
      p.inicializaDatos((int*)auxIPport);
      s->envia(p);
   }
   vector<pair<string, int> > finished;
   while(!checkFinished(clients)) {
      s->recibe(p);
         // Modify you coords         
      for (int j=0; j < NUM_CLIENTS; j++) {
            // Found the correct client 
         if (strcmp(get<0>(clients[j]).c_str(),p.obtieneDireccion()) == 0 && get<1>(clients[j])==p.obtienePuerto()) { 
               // Modify the clients coords
            //cout << p.obtienePuerto() << ":";
            for (int k = 0; k < NUM_CLIENTS; k++) {
               string ip = p.obtieneDireccion();
               if (ip == get<4>(clients[k]) && p.obtienePuerto() == get<5>(clients[k])) {
                  get<3>(clients[k]).x = p.obtieneDatos()[0];
                  get<3>(clients[k]).y = p.obtieneDatos()[1];
                  //cout << get<1>(clients[k]) << endl;
                  break;
               }
            }
            // Modify your coords
            dist[0] = p.obtieneDatos()[0];
            dist[1] = p.obtieneDatos()[1]; 
            get<2>(clients[j]).x = p.obtieneDatos()[0];
            get<2>(clients[j]).y = p.obtieneDatos()[1];   
            if (j + 1 == NUM_CLIENTS) { 
               dist[2] = get<2>(clients[0]).x;
               dist[3] = get<2>(clients[0]).y; 
            } else {
               dist[2] = get<3>(clients[j]).x;
               dist[3] = get<3>(clients[j]).y; 
            }          
            break;
         }
      }
      printClients(clients);
      p.inicializaDatos(dist);
      s->envia(p);
      gfx_clear();
         usleep(41666); //24 por segundo
      }
      getchar();
      delete s;
      return 0;
   }
